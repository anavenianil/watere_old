package com.callippus.web.business.mmg.cashbuildup.workflow;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.hibernate.Hibernate;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.hibernate.transform.Transformers;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.callippus.web.beans.requests.RequestBean;
import com.callippus.web.business.requestprocess.RequestProcess;
import com.callippus.web.controller.common.CPSConstants;
import com.callippus.web.controller.common.CPSUtils;
import com.callippus.web.controller.common.HibernateUtils;
import com.callippus.web.dao.common.IComonObjectDAO;
import com.callippus.web.mmg.cashbuildup.beans.IRMasterBean;
import com.callippus.web.mmg.cashbuildup.beans.InvoiceRequestBean;
import com.callippus.web.mmg.cashbuildup.dto.FundsAllotedDetailsDTO;
import com.callippus.web.mmg.cashbuildup.dto.IRItemDetailsDTO;

@Service
public class InvoiceRequestProcess extends RequestProcess {
	private static Log log = LogFactory.getLog(InvoiceRequestProcess.class);
	@Autowired
	private RequestProcess requestProcess;
	@Autowired
	com.callippus.web.controller.common.HibernateUtils hibernateUtils;
	@Autowired
	private InvoiceDomainObject invoiceDomainObject;
	@Autowired
	private IComonObjectDAO commonDAO;

	public String initWorkflow(InvoiceRequestBean invoiceRequestBean) throws Exception {
		log.debug("::<<<<<<Method>>>>>>>>>>>>>>>initWorkflow(InvoiceRequestBean invoiceRequestBean)>>>>>>>>>Start");
		String message = null;
		try {
			/**
			 * Generate Unique ID for this Request
			 */
			invoiceRequestBean.setRequestID(requestProcess.generateUniqueID(CPSConstants.REQUEST));
			if (CPSUtils.compareStrings(invoiceRequestBean.getType(), "invoice")) {
				invoiceRequestBean.setRequestType(CPSConstants.INVOICE);
				invoiceRequestBean.setRequestTypeID("10");// Invoice Request type ID = 10
			} else {
				invoiceRequestBean.setRequestType(CPSConstants.CANCELIR);
				invoiceRequestBean.setRequestTypeID("14");
			}

			/**
			 * When Invoice is generated by inventory holder Invoice details are saved in IRmaster and IRitemdetails tables.
			 */
			IRMasterBean invoiceMasterBean = null;
			if (CPSUtils.compareStrings(invoiceRequestBean.getType(), "invoice")) {
				invoiceMasterBean = setChangedValues(invoiceRequestBean);
				invoiceMasterBean.setStatus(1);
				invoiceMasterBean.setCreationDate(CPSUtils.getCurrentDateWithTime());
				invoiceMasterBean.setLastModifiedDate(CPSUtils.getCurrentDateWithTime());
				message = submitTxnDetails(invoiceMasterBean);
			} else
				message = CPSConstants.SUCCESS;

			if (CPSUtils.compareStrings(message, CPSConstants.SUCCESS)) {
				/**
				 * decide the work flow & insert into history table
				 */
				RequestBean rb = new RequestBean();
				BeanUtils.copyProperties(rb, invoiceRequestBean);
				message = requestProcess.initWorkflow(rb);
				/**
				 * Request Id will be updated for the invoice
				 */
				updateRequestIdForInvoice(invoiceRequestBean, rb.getRequestID(), rb.getType());
				/**
				 * If No workflow is assigned then update the details in the table
				 */
				if (CPSUtils.compareStrings(CPSConstants.UPDATE, message)) {
					log.debug("::request workflow not assigned, so update in the main table");
					BeanUtils.copyProperties(invoiceRequestBean, rb);
					if (CPSUtils.compareStrings(invoiceRequestBean.getType(), "invoice"))
						message = invoiceDomainObject.updateTxnDetails(invoiceRequestBean);
					else
						message = invoiceDomainObject.UpdateInvoiceStatus(invoiceRequestBean.getVoucherNo(), CPSConstants.INVOICECANCEL);
				}

			}

		} catch (Exception e) {
			throw e;
		}
		log.debug("::<<<<<<Method>>>>>>>>>>>>>>>initWorkflow(InvoiceRequestBean invoiceRequestBean)>>>>>>>>>End");
		return message;
	}

	public IRMasterBean setChangedValues(InvoiceRequestBean invoiceRequestBean) throws Exception {
		log.debug("::<<<<<<Method>>>>>>>>>>>>>>>setChangedValues(InvoiceRequestBean invoiceRequestBean)>>>>>>>>>Start");
		IRMasterBean invoiceMasterBean = null;
		List<IRItemDetailsDTO> voucherItemslist = null;
		try {
			invoiceMasterBean = new IRMasterBean();
			BeanUtils.copyProperties(invoiceMasterBean, invoiceRequestBean);
			JSONArray json = (JSONArray) invoiceRequestBean.getItemsJson();
			voucherItemslist = new ArrayList<IRItemDetailsDTO>();
			Float total = 0.0f;
			for (int i = 0; i < json.size(); i++) {
				JSONObject itemsjson = (JSONObject) json.get(i);
				IRItemDetailsDTO items = new IRItemDetailsDTO();
				BeanUtils.copyProperties(items, itemsjson);
				if (!CPSUtils.isNullOrEmpty(invoiceRequestBean.getTaxType())) {
					String[] st = invoiceRequestBean.getTaxType().split(",");
					for (int j = 1; j <= st.length; j++) {
						if (CPSUtils.compareStrings(st[i].split("#")[2].toString(), items.getMaterialCode())) {
							items.setTaxTypeId(st[i].split("#")[0]);
							Float taxAmount = Float.parseFloat(items.getUnitRate()) * Float.parseFloat(st[i].split("#")[1].toString()) / 100;
							items.setTaxAmount(String.valueOf(taxAmount));
						}
					}
				} else {
					items.setTaxAmount("0");
				}
				items.setCreationDate(CPSUtils.getCurrentDate());
				items.setLastModifiedDate(CPSUtils.getCurrentDate());
				items.setVoucherNo(invoiceRequestBean.getVoucherNo());
				items.setStatus("1");
				items.setId(null);
				voucherItemslist.add(items);
				total += Float.parseFloat(items.getUnitRate()) * Float.parseFloat(items.getQty()) + Float.parseFloat(items.getTaxAmount());
			}
			invoiceMasterBean.setTotalAmount(String.valueOf(total));
			invoiceMasterBean.setIrItems(voucherItemslist);
			invoiceMasterBean.setVoucherNo(invoiceRequestBean.getVoucherNo());
			invoiceRequestBean.setIrItems(voucherItemslist);
			invoiceMasterBean.setStatus(1);
		} catch (Exception e) {
			throw e;
		}
		log.debug("::<<<<<<Method>>>>>>>>>>>>>>>setChangedValues(InvoiceRequestBean invoiceRequestBean)>>>>>>>>>End");
		return invoiceMasterBean;
	}

	public String submitTxnDetails(Object invoiceMasterBean) throws Exception {
		log.debug("::<<<<<<Method>>>>>>>>>>>>>>>submitTxnDetails(InvoiceMasterBean vMasterBean)>>>>>>>>>Start");
		String message = null;
		Session session = null;
		Transaction tx = null;
		try {
			session = hibernateUtils.getSession();//session = sessionFactory.openSession();
			//tx = session.beginTransaction();
			session.save(invoiceMasterBean);
			session.flush();//tx.commit() ;
			message = CPSConstants.SUCCESS;
		} catch (Exception e) {
			throw e;
		} finally {
			//session.close();
		}
		log.debug("::<<<<<<Method>>>>>>>>>>>>>>>submitTxnDetails(InvoiceMasterBean vMasterBean)>>>>>>>>>End");
		return message;
	}

	public String approvedRequest(InvoiceRequestBean vrb) throws Exception {
		log.debug("::<<<<<Method>>>>>>>>>>>>>>>approvedRequest(InvoiceRequestBean vrb)>>>>>>>>>Start");
		RequestBean rb = null;
		try {
			rb = new RequestBean();
			BeanUtils.copyProperties(rb, vrb);
			rb = requestProcess.approvedRequest(rb);
			if (CPSUtils.compareStrings(CPSConstants.UPDATE, rb.getMessage())) {
				log.debug("::request workflow completed, so update in the main table");
				BeanUtils.copyProperties(vrb, rb);
				String message = "";
				if (CPSUtils.compareStrings(vrb.getType(), "invoice")) {
					message = invoiceDomainObject.updateTxnDetails(vrb);
				} else {
					message = invoiceDomainObject.UpdateInvoiceStatus(vrb.getVoucherNo(), CPSConstants.INVOICECANCEL);
					message = cancelRequest(rb.getIpAddress(), rb.getRemarks(), rb.getRequestID());
				}
				rb.setMessage(message);
			}
		} catch (Exception e) {
			throw e;
		}
		log.debug("::<<<<<Method>>>>>>>>>>>>>>>approvedRequest(InvoiceRequestBean vrb)>>>>>>>>>End");
		return rb.getMessage();
	}

	public String setValues(InvoiceRequestBean irb) throws Exception {
		log.debug("::<<<<<RequestProcess<<<<<<Method>>>>>>>>>>>>>>>setValues(DemandRequestBean drb)>>>>>>>>>");
		String message = null;
		Session session = null;
		try {
			session = hibernateUtils.getSession();//session = sessionFactory.openSession();
			if (CPSUtils.compareStrings(irb.getApprovedDept(), CPSConstants.MMG)) {
				/**
				 * Update memoNo if security people has entered wrongly
				 */
				String[] st = irb.getMemoNo().split(",");
				IRMasterBean invoice = new IRMasterBean();
				invoice = setChangedValues(irb);
				List<IRItemDetailsDTO> list = invoice.getIrItems();
				String sql = "update IRItemDetailsDTO set memoNo=? where voucher_no=? and materialCode=?";
				for (int j = 0; j < st.length; j++) {
					IRItemDetailsDTO iritems = (IRItemDetailsDTO) list.get(j);
					session.createQuery(sql).setString(0, st[j].toString()).setString(1, irb.getVoucherNo()).setString(2, iritems.getMaterialCode()).executeUpdate();
				}
				message = CPSConstants.SUCCESS;
			} else if (CPSUtils.compareStrings(irb.getApprovedDept(), CPSConstants.FINANCE)) {
				FundsAllotedDetailsDTO payment = new FundsAllotedDetailsDTO();
				BeanUtils.copyProperties(payment, irb);
				int id = commonDAO.getTableID("MMG_B_FUNDS_ALLOTTED_DETAILS", CPSConstants.UPDATE);
				payment.setId(String.valueOf(id));
				payment.setCreationDate(CPSUtils.getCurrentDateWithTime());
				payment.setLastModifiedDate(CPSUtils.getCurrentDateWithTime());
				payment.setStatus("1");
				if (CPSUtils.compareStrings(payment.getPaymentTypeId(), "1"))
					payment.setFundAmount(irb.getFundAmount());
				if (CPSUtils.compareStrings(payment.getPaymentTypeId(), "2"))
					payment.setFundAmount(irb.getSettleAmount());
				submitTxnDetails(payment);
				message = CPSConstants.SUCCESS;
			} else {
				message = CPSConstants.SUCCESS;
			}
		} catch (Exception e) {
			message = CPSConstants.FAILED;
			throw e;
		} finally {
			//session.close();
		}
		return message;
	}

	public void updateRequestIdForInvoice(InvoiceRequestBean irb, String requestId, String type) throws Exception {
		Session session = null;
		try {
			session = hibernateUtils.getSession();//session = sessionFactory.openSession();
			String sql = "";
			if (CPSUtils.compareStrings(irb.getType(), "invoice")) {
				sql = "update IRMasterBean set requestId=? where voucherNo=?";
			} else {
				sql = "update IRMasterBean set cancelRequestId=?,reason=? where voucherNo=?";
			}
			Query qry = session.createQuery(sql);
			if (CPSUtils.compareStrings(irb.getType(), "invoice")) {
				qry.setString(0, requestId).setString(1, irb.getVoucherNo()).executeUpdate();
			} else {
				qry.setString(0, requestId).setString(1, irb.getReason()).setString(2, irb.getVoucherNo()).executeUpdate();
			}
		} catch (Exception e) {
			throw e;
		} finally {
			//session.close();
		}
	}

	public String cancelRequest(String ipAddress, String remarks, String cancelrequestId) throws Exception {
		Session session = null;
		String message = "";
		try {
			session = hibernateUtils.getSession();//session = sessionFactory.openSession();
			String requestId = (String) session.createSQLQuery("select request_id from MMG_B_IR_MASTER where cancel_request_id=?").setString(0, cancelrequestId).uniqueResult();
			String historyID = (String) session.createSQLQuery("select max(id) as historyId from REQUEST_WORKFLOW_HISTORY where request_id=?").addScalar("historyId", Hibernate.STRING).setString(0,
					requestId).uniqueResult();
			requestProcess.declinedRequest(historyID, ipAddress, remarks, CPSConstants.CANCELLED, CPSConstants.STATUSCANCELLED);
		} catch (Exception e) {
			throw e;
		} finally {
			//session.close();
		}
		return message;
	}

	@SuppressWarnings("unchecked")
	public String declineRequest(RequestBean rb) throws Exception {
		Session session = null;
		String message = "";
		try {
			session = hibernateUtils.getSession();//session = sessionFactory.openSession();
			HashMap<String, Object> resultset = (HashMap<String, Object>) session.createSQLQuery(
					"select account_head_id as accId,total_cost as total,voucher_no as voucherNo from MMG_B_IR_MASTER where request_id=?").setResultTransformer(Transformers.ALIAS_TO_ENTITY_MAP)
					.setString(0, rb.getRequestID()).uniqueResult();
			invoiceDomainObject.UpdateInvoiceStatus(resultset.get("VOUCHERNO").toString(), CPSConstants.DEMANDCANCEL);
			message = CPSConstants.SUCCESS;
		} catch (Exception e) {
			message = CPSConstants.FAILED;
			throw e;
		} finally {
			//session.close();
		}
		return message;
	}
}
